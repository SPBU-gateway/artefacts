networks:
  kafka-net:
    name: kafka-net
    driver: bridge
# Network end
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    networks:
      - kafka-net # Данный network нужно прописывать всем сервисам, которые хотят общаться с kafka


  kafka-1:
    image: confluentinc/cp-kafka:7.6.1
    container_name: kafka-1 # Любой сервис из той же сети, что и кафка, может обратить к ней по адрес http://kafka-1:9092
    depends_on:
      - zookeeper
    ports:
      - 9092:9092 # Внешний порт для сервисов
    networks:
      - kafka-net # Данный network нужно прописывать всем сервисам, которые хотят общаться с kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-1:19092,EXTERNAL://kafka-1:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1


  # UI для просмотра сообщений и топиков в кафке, нужно для разработки и тестирования
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:v0.7.2
    networks:
      - kafka-net
    ports:
      - 8090:8080 # http://localhost:8090
    depends_on:
      - kafka-1
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-1:19092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
  
  monitor:
    image: monitor
    build:
      context: ./monitor
      dockerfile: Dockerfile
    networks:
      - kafka-net

  mainHub:
    image: main-hub
    build:
      context: ./mainHub/src
    depends_on:
      - kafka-1
      - kafka-ui
    networks:
      - kafka-net
    ports:
      - 8001:8001

  mainStorage:
    image: main-storage
    build:
      context: ./mainStorage/src
    depends_on:
      - kafka-1
      - kafka-ui
      - db-main-storage
    networks:
      - kafka-net
    restart: always
    ports:
      - 81:81

  db-main-storage:
    container_name: db-main-storage
    image: postgres:16.1
    networks:
      - kafka-net
    environment:
      POSTGRES_DB: "MainStorage"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "1234"
    ports:
      - 5432:5432

  Storage:
    image: storage
    build:
      context: ./storage/src
    depends_on:
      - kafka-1
      - kafka-ui
      - db-storage
    networks:
      - kafka-net
    restart: always
    ports:
      - 82:82

  db-storage:
    container_name: db-storage
    image: postgres:16.1
    networks:
      - kafka-net
    environment:
      POSTGRES_DB: "Storage"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "1234"
    ports:
      - "5433:5432"
  
  Hub:
    image: hub
    build:
      context: ./hub/src
    depends_on:
      - kafka-1
      - kafka-ui
    networks:
      - kafka-net
    ports:
      - 8002:8002

  # ASA

  verifier:
    container_name: verifier
    networks:
      - kafka-net
    build:
      context: ./java/verifier
      dockerfile: Dockerfile

  manager-input:
    container_name: manager-input
    networks:
      - kafka-net
    ports:
      - 8081:8081
    build:
      context: ./java/ManagerInput
      dockerfile: Dockerfile
  
  device-storage:
    networks:
      - kafka-net
    image: bitnami/postgresql:15
    container_name: device-storage
    env_file:
      - ./java/DeviceStorage/.env
    ports:
      - "5440:5432"
    volumes:
      - device-storage-data:/var/lib/postgresql/data/
      - ./db-init/:/docker-entrypoint-initdb.d/

  device-storage-api:
    container_name: device-storage-api
    networks:
      - kafka-net
    build:
      context: ./java/DeviceStorage
      dockerfile: Dockerfile
    depends_on:
      - device-storage

  client-storage-api:
    container_name: client-storage-api
    networks:
      - kafka-net
    build:
      context: ./java/ClientStorage
      dockerfile: Dockerfile
   
  client-auth:
    container_name: client-auth
    networks:
      - kafka-net
    build:
      context: ./java/ClientAuth
      dockerfile: Dockerfile

  

volumes:
  device-storage-data:


